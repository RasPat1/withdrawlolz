"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""


def p2_bf(max):
  # I can write a modified fib to only generate the even number terms if I'd like. But always brute force first...
  sum = 0

  f1 = 1
  f2 = 1
  f3 = 0

  while f3 < max:
    if f3 % 2 == 0:
      sum += f3
    f1 = f2
    f2 = f3
    f3 = f1 + f2

  return sum


def p2_skip_fib(max):
  # A more elegant way to do it would be to only calculate the even terms.  But I think we can do better.
  # The later fib numbers carry the older fib numbers no?

  sum = 0
  f1 = 1
  f2 = 2

  while f2 < max:
    sum += f2
    odd_fib = 1*f1 + 2*f2
    next_even_fib = 2*f1 + 3*f2
    f1 = odd_fib
    f2 = next_even_fib

  return sum


def p2_only_evens(max):
  sum = 0

  f1 = 0
  f2 = 2

  while f2 < max:
    sum += f2
    f3 = f1 + 4*f2
    f1 = f2
    f2 = f3

  return sum


max = 4_000_000
print(p2_only_evens(max))
